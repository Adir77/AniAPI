@inject IJSRuntime JS;

@using System.Text.Json;
@using System.Text.Json.Serialization;

@code{
    [Parameter] public AnimeEpisodi listEpisodi { get; set; }
    [Parameter] public int? VideoNumeroEpisodio { get; set; }
    [Parameter] public Action<int> VideoNumeroEpisodioChanged { get; set; }

    private Episodio episodioAttuale;
    bool isPlaying = false;
    bool showControls = false;
    bool fullScreen = false;
    bool caricaVideo = false;

    protected override void OnParametersSet()
    {
        if (listEpisodi == null)
            return;

        if (VideoNumeroEpisodio == null)
            VideoNumeroEpisodio = 1;

        Episodio episodioPrecedente = episodioAttuale;

        episodioAttuale = listEpisodi.Episodi.Where(num => num.NumeroEpisodio == VideoNumeroEpisodio.Value).FirstOrDefault();

        if (episodioPrecedente != null && episodioAttuale.Url != episodioPrecedente.Url)
            caricaVideo = true;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("initVideoVariables");

        if (!firstRender)
        {
            await JS.InvokeVoidAsync("ScroolToVideo");
        }

        if (caricaVideo)
            await CaricaVideo();

        caricaVideo = false;

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CaricaVideo()
    {
        isPlaying = false;
        await JS.InvokeVoidAsync("VideoHelper_PlayPause", isPlaying);
        await JS.InvokeVoidAsync("VideoHelper_Load", episodioAttuale.Url);
    }

    private bool ShowControls(bool mouseIn)
    {
        if (!mouseIn && !isPlaying)
        {
            showControls = true;
            return true;
        }

        showControls = mouseIn;
        return false;
    }

    private async Task togglePlay(MouseEventArgs args)
    {
        isPlaying = !isPlaying;

        await JS.InvokeVoidAsync("VideoHelper_PlayPause", isPlaying);
    }

    private async Task toggleFullScreen()
    {
        fullScreen = !fullScreen;

        await JS.InvokeVoidAsync("toggleFullScreen", fullScreen);
    }

    private async Task NextEpisode()
    {
        if (VideoNumeroEpisodio + 1 <= listEpisodi.Episodi.Count)
        {
            VideoNumeroEpisodio++;
            VideoNumeroEpisodioChanged?.Invoke(VideoNumeroEpisodio.Value);
            isPlaying = false;
            await CaricaVideo();
        }
    }
}

<div class="video-container" @ondblclick="@(() => toggleFullScreen())" @onmouseover="@(() => ShowControls(true))" @onmouseout="@(() => ShowControls(false))">
    <div class="playback-animation playback-icons">
        <i class="fas fa-play large white @(isPlaying ? "hidden" : "")"></i>
        <i class="fas fa-pause large white @(!isPlaying ? "hidden" : "")"></i>
    </div>

    <video class="video" preload="metadata" style="@(fullScreen ? "height: auto;" : "")" @onclick="togglePlay">
        <source src="@episodioAttuale.Url" type="video/mp4" />
    </video>

    <div class="video-controls @(!showControls ? "hidden" : "")">
        <div class="video-progress">
            <progress class="progress-bar" value="0" min="0"></progress>
            <input class="seek" value="0" min="0" type="range" step="1">
            <div class="seek-tooltip">00:00</div>
        </div>

        <div class="bottom-controls ">
            <div class="left-controls">
                <button data-title="@(isPlaying ? "Pause (spacebar)" : "Play (spacebar)")" class="play playback-icons" @onclick="togglePlay">
                    <i class="fas fa-play large white @(isPlaying ? "hidden" : "")"></i>
                    <i class="fas fa-pause large white @(!isPlaying ? "hidden" : "")"></i>
                </button>

                @if (VideoNumeroEpisodio + 1 < listEpisodi.Episodi.Count)
                {
                    <button data-title="Next (N)" id="next" class="next-button" @onclick="NextEpisode">
                        <i class="fas fa-step-forward large white"></i>
                    </button>
                }

                <div class="volume-controls">
                    <button data-title="Mute (M)" class="volume-button" id="volume-button">
                        <i class="fas fa-volume-mute large hidden white"></i>
                        <i class="fas fa-volume-down large hidden white"></i>
                        <i class="fas fa-volume large hidden white"></i>
                        <i class="fas fa-volume-up large white"></i>
                    </button>

                    <input class="volume" value="1" data-mute="0.5" type="range" max="1" min="0" step="0.01">
                </div>

                <div class="time">
                    <time id="time-elapsed">00:00</time>
                    <span> / </span>
                    <time id="duration">00:00</time>
                </div>
            </div>

            <div class="right-controls">
                <button data-title="PIP (P)" class="pip-button" id="pip-button">
                    <svg>
                        <use href="#pip"></use>
                    </svg>
                </button>
                <button data-title="@(fullScreen ? "Exit full screen (F)" : "Full screen (F)")" class="fullscreen-button" @onclick="@(() => toggleFullScreen())">
                    <i class="fas fa-expand large white @(!fullScreen ? "hidden" : "")"></i>
                    <i class="fas fa-compress large white @(fullScreen ? "hidden" : "")"></i>
                </button>
            </div>
        </div>
    </div>
</div>
@*Slider ultimi 5 secondi*@
<div id="nextEpisodeCountDown" class="hide nextEpisodeCountDown">
    <div class="Text">
        Prossimo Episodio<span id="nextEpisodeTimeLeft"> 5 sec</span>
    </div>
    <div class="slide"></div>
</div>


<svg style="display: none">
    <defs>
        <symbol id="pip" viewBox="0 0 24 24">
            <path d="M21 19.031v-14.063h-18v14.063h18zM23.016 18.984q0 0.797-0.609 1.406t-1.406 0.609h-18q-0.797 0-1.406-0.609t-0.609-1.406v-14.016q0-0.797 0.609-1.383t1.406-0.586h18q0.797 0 1.406 0.586t0.609 1.383v14.016zM18.984 11.016v6h-7.969v-6h7.969z"></path>
        </symbol>
    </defs>
</svg>