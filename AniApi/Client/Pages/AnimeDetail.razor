@page "/AnimeDetail/{AnimeID}"
@page "/AnimeDetail/{AnimeID}/Episodio/{NumeroEpisodio}"

@inject IJSRuntime JS;
@inject UIConfigurations uiConfigs
@inject HttpClient client
@inject NavigationManager navigationManager

@using Models;


@code {
    [Parameter] public int AnimeID { get; set; }
    [Parameter] public int? NumeroEpisodio { get; set; }
    Anime anime = null;
    AnimeEpisodi listEpisodi = null;
    Episodio episodioAttuale = null;
    List<Episodio> episodiAlternativi = null; //Da usare?

    protected override async Task OnInitializedAsync()
    {
        if (AnimeID == 0)
            navigationManager.NavigateTo("/");

        anime = await client.GetFromJsonAsync<Anime>("/api/v1/anime/" + AnimeID);

        listEpisodi = await client.GetFromJsonAsync<AnimeEpisodi>("/api/v1/episodi/" + AnimeID);
        episodioAttuale = listEpisodi.Episodi.Where(num => num.NumeroEpisodio == (NumeroEpisodio.HasValue ? 1 : NumeroEpisodio.Value)).FirstOrDefault();
        episodiAlternativi = listEpisodi.Episodi.Where(num => num.NumeroEpisodio == (NumeroEpisodio.HasValue ? 1 : NumeroEpisodio.Value)).Where(ep => ep != episodioAttuale).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Initialize Video Player
            //await JS.InvokeAsync<string>("initVideoVariables");
        }

        if (uiConfigs.UseCustomVideoPlayer)
            await JS.InvokeAsync<string>("initVideoVariables");
    }
}


<h1>Pagina Dettaglio Anime</h1>

@* TODO - MODIFICA - CONTENITORE TEMPORANEO*@
@if (uiConfigs.UseCustomVideoPlayer)
{
    <div class="container">
        <VideoPlayer url="@episodioAttuale.Url" />
    </div>
}
else
{
    <div class="container">
        <video class="video" preload="metadata" controls>
            <source src="@episodioAttuale.Url" type="video/mp4" />
        </video>
    </div>
}

@* TODO - MODIFICA - CONTENITORE TEMPORANEO*@
<style>
    :root {
        --youtube-red: #FE0900;
    }

    html {
        box-sizing: border-box;
        font-family: "YouTube Noto",Roboto,Arial,Helvetica,sans-serif;
        height: 100%;
    }

    *, *::before, *::after {
        box-sizing: inherit;
        margin: 0;
        padding: 0;
    }

    body {
        height: 100%;
    }

    .container {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>